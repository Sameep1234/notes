{"pageProps":{"note":{"id":"n4BEufpcVKWeg83gEF76l","title":"Lecture 4","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"timers-cont":{"type":"header","text":"Timers (Cont.)","value":"timers-cont","line":9,"column":0},"ctc-mode":{"type":"header","text":"CTC Mode","value":"ctc-mode","line":63,"column":0}},"fname":"courses.Semester 5.Embedded Systems.Lecture 4","updated":1631515853885,"created":1631511523542,"parent":"a1PatlsCiz7PYsL111lFm","children":[],"data":{},"contentHash":"1dcc40a83b82c22d4e99e4a2c830219e","custom":{}},"body":"<h1 id=\"lecture-4\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lecture-4\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lecture 4</h1>\n<h2 id=\"timers-cont\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#timers-cont\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Timers (Cont.)</h2>\n<blockquote>\n<p>Program to generate square wave of time period 100 micro second on Pin 1 of Port A and clock frequency of 1Mz</p>\n</blockquote>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;avr/io.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">T0Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    TCNT0 <span class=\"token operator\">=</span> <span class=\"token number\">206</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Time delay is of 50 microseconds and not 100 microseconds.</span>\n    TCCR0 <span class=\"token operator\">=</span> <span class=\"token number\">0x01</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Normal mode and no prescaling</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>TIFR <span class=\"token operator\">&#x26;</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Check for counter</span>\n    TCCR0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stop the clock</span>\n    TIFR <span class=\"token operator\">=</span> <span class=\"token number\">0x1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset flags</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DDRA <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Define PIN 1 of PORTA to be ouput</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        PORTA <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Turn PIN 1 of PORTA on</span>\n        <span class=\"token function\">T0Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Provide time delay</span>\n        PORTA <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Turn PIN 1 of PORTA off</span>\n        <span class=\"token function\">T0Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Proivde time delay</span>\n        <span class=\"token comment\">// This will generate a square wave form.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<hr>\n<blockquote>\n<p><img src=\"/notes/assets/images/2021-09-13-11-42-59.png\"></p>\n</blockquote>\n<ul>\n<li>The outside signal will come from pins of ports as they can have alternate functions too.</li>\n<li>These pins will take the input from port.</li>\n<li>Follow this for more functions\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-13-11-44-23.png\"></li>\n</ul>\n</li>\n<li>For internal purpose, assume that the clock frequency is 1Mz. <strong>Note that 1Hz is from outside world.</strong></li>\n</ul>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;avr/io.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DDRB <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Declare whole port as input because this is where external signal will arrive.</span>\n    DDRC <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Declare whole port as output because this is where we will be displaying the count of TCNT.</span>\n    PORTB <span class=\"token operator\">=</span> <span class=\"token number\">0x00</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set PORTB to 0</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Run forever</span>\n        TCCR0 <span class=\"token operator\">=</span> <span class=\"token number\">0x06</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// External clock with falling edge value from the table</span>\n        PORTC <span class=\"token operator\">=</span> TCNT0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Display contents of TCNT0 on PORTC</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"ctc-mode\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#ctc-mode\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>CTC Mode</h2>\n<ul>\n<li>It is compare mode. This means that instead of going till 0xFF, it will drop at the set value.</li>\n<li>It may or may not be equal to 0xFF.</li>\n<li>Now to compare the flag, we compare with 0x02. (i.e flag 1 instead of flag 0).</li>\n<li><strong>This is because the overflow flag is not affected, the compare flag is affected.</strong></li>\n</ul>\n<blockquote>\n<p>Program to generate a square wave of time period 150 microseconds on PIN 1 of PORT A. Assume cystal frequency = 1MHz. use timer in CTC mode.</p>\n</blockquote>\n<ul>\n<li>Note that the delay of 150 microseconds is for the whole wave.</li>\n<li>Thus, if we need a delay for only one part of the wave, we need to use a delay of 75 microseconds.</li>\n<li>Now we want to write the value of OCR0.</li>\n<li>Make sure to change the value of TCCR0 for CTC mode.</li>\n<li>Now, the time duration will depend not only on TCNT0 but also on OCR0.</li>\n<li>In normal mode, we are concerned with FF - TCNT0 value but here we are concerned with OCR0 - TCNT0 which must be 75.</li>\n<li>Note that one must always be careful about which flag are we going to use.</li>\n<li>In <strong>normal mode</strong>, we are waiting for <strong>overflow flag</strong> whereas in <strong>CTC mode</strong> we are waiting for the <strong>compare flag</strong>.</li>\n<li>For simplicity, you can put TCNT0 value to be 0 and OCR0 value to be 75. <strong>The concept remains the same i.e OCR-TCNT should be 75.</strong></li>\n<li></li>\n</ul>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;avr/io.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">T0Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    TCNT0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TCNT0 = 0</span>\n    OCR0 <span class=\"token operator\">=</span> <span class=\"token number\">75</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OCR0 - TCNT0 = 75 and TCNT0 = 0</span>\n    TCCR0 <span class=\"token operator\">=</span> <span class=\"token number\">0x09</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TCCR0 value for CTC mode and no prescaling</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>TIFR <span class=\"token operator\">&#x26;</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Check 1st bit</span>\n    TCCR0 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Stop clock</span>\n    TIFR <span class=\"token operator\">=</span> <span class=\"token number\">0x2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Reset flags</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    DDRA <span class=\"token operator\">=</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Set PORTA.1 as output pin</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Run forever</span>\n        PORTA <span class=\"token operator\">=</span> PORTA <span class=\"token operator\">^</span> <span class=\"token number\">0x02</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Toggle value at PORTA</span>\n        <span class=\"token function\">T0Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Apply time delay</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<ul>\n<li>Now suppose, we start the value of TCNT0 with 200, then how will the OCR value change?</li>\n<li>For this case, we find the extra distance i.e find from where it \"rolls over\".</li>\n<li>Thus, the value of OCR must be 19 becuase from 200 to 256, we would have covered 56 values and then 19 values remain to provide a proper delay of 75 microseconds.</li>\n</ul>","noteIndex":{"id":"PAQSbL1rYQAohZXoEr47M","title":"Curated Notes","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{},"fname":"root","updated":1630150480330,"created":1629975412335,"parent":null,"children":["Jq5ki9jf1QLTdc3DYLRW4","3ONxZ3Khb7nFPdLxlV1ib"],"data":{},"contentHash":"250e1442f895f06dba982d3a97cc447f","custom":{"nav_order":0,"permalink":"/"},"body":"\n\r\n\r\nYou have reached the home page of my curated notes. I am a third year student pursuing Computer Science and Engineering at Ahmedabad University.\r\n\r\nFeel free to use this resource to its best potential and reach out to me on [Linkedin](https://www.linkedin.com/in/sameep-vani/) and do checkout my [GitHub](https://github.com/Sameep1234)\r\n"},"collectionChildren":null,"customHeadContent":null,"config":{"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"siteUrl":"https://sameep1234.github.io","assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Sameep","description":"Personal knowledge space","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"author":"Sameep","logo":"vault/logo.gif","ga_tracking":"G-VZ67P3SVZE","siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"version":4,"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"dendronVersion":"0.70.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journalc","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"}},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}