{"pageProps":{"note":{"id":"VIYwqRTFVxu0NTXGRThj4","title":"Lecture 8","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"uniprocessor-scheduling-algorithms":{"type":"header","text":"Uniprocessor Scheduling Algorithms","value":"uniprocessor-scheduling-algorithms","line":9,"column":0},"decision-mode":{"type":"header","text":"Decision Mode","value":"decision-mode","line":21,"column":0},"cpu-bound-and-io-bound":{"type":"header","text":"CPU Bound and I/O Bound","value":"cpu-bound-and-io-bound","line":33,"column":0},"first-come-first-serve-fcfs":{"type":"header","text":"First Come First Serve (FCFS)","value":"first-come-first-serve-fcfs","line":38,"column":0},"round-robin-rr":{"type":"header","text":"Round Robin (RR)","value":"round-robin-rr","line":50,"column":0},"virtual-round-robin":{"type":"header","text":"Virtual Round Robin","value":"virtual-round-robin","line":73,"column":0},"shortest-process-next-spn":{"type":"header","text":"Shortest Process Next (SPN)","value":"shortest-process-next-spn","line":78,"column":0},"extra-points":{"type":"header","text":"Extra Points","value":"extra-points","line":91,"column":0}},"fname":"courses.Semester 5.Operating System.Lecture 8","updated":1632105946469,"created":1631672853178,"parent":"OGq6U8MXIG3wwETNLR4b6","children":[],"data":{},"contentHash":"f5197d28b94ca90bf67ed0e9501707cc","custom":{}},"body":"<h1 id=\"lecture-8\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lecture-8\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lecture 8</h1>\n<h2 id=\"uniprocessor-scheduling-algorithms\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#uniprocessor-scheduling-algorithms\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Uniprocessor Scheduling Algorithms</h2>\n<ul>\n<li>We would be discussing only short-term scheduling.</li>\n<li>They mainly include dispatching techniques.</li>\n<li>Algorithms available\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-20-08-08-03.png\"></li>\n</ul>\n</li>\n<li>Selection Function\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-20-08-10-10.png\"></li>\n</ul>\n</li>\n<li>Normalized TAT is better quantity to compare two scheduling algorithms.</li>\n<li>Normalized TAT is relative delay and it represents how much a process needs to wait.</li>\n<li>We can't have normalized TAT less than 1 because service time can never be more than TAT.</li>\n</ul>\n<h2 id=\"decision-mode\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#decision-mode\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Decision Mode</h2>\n<ul>\n<li>Specifies the instants in time at which the slection functions is exercised.</li>\n<li>Two Types\n<ul>\n<li>Nonpreemptive - Once a process is in running state, it will continue until it terminates or blocks itself for I/O.\n<ul>\n<li>This means it can't be forcefully stopped.</li>\n</ul>\n</li>\n<li>Preemptive - Currently running process may be interrupted and moves to ready state by the OS.\n<ul>\n<li>This normally occurs when new process arrives, on an interrupt or periodically.</li>\n<li>In simple terms, this will occur when a new process is inserted or an interrupt is passed or periodically this premption is performed.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Normally preemptive mode is preferred even though it increases overhead because of more frequent process switching but it also prevents one process from monopolizing the processor.</li>\n<li>For example, a process requires a user input and if user is on a break, the process will block all other processes which otherwise would have ran. This is called monopolizing the processor.</li>\n</ul>\n<h2 id=\"cpu-bound-and-io-bound\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#cpu-bound-and-io-bound\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>CPU Bound and I/O Bound</h2>\n<ul>\n<li>If a process spends most of its time in processor, then it is called CPU bound and vice versa.</li>\n<li>Example of I/O bound process includes chatting. It uses I/O for most of the time because it is waiting for the user to enter the values.</li>\n</ul>\n<h2 id=\"first-come-first-serve-fcfs\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#first-come-first-serve-fcfs\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>First Come First Serve (FCFS)</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-20-08-14-00.png\"></li>\n<li>It is one of the most fair strategy in the <strong>real world.</strong></li>\n<li>w = waiting time.</li>\n<li>For better efficiency TAT should be as low as possible.</li>\n<li>Example\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-10-54-38.png\"></li>\n</ul>\n</li>\n<li>Issues\n<ul>\n<li>A short process may have to wait a very long time before it can execute.</li>\n<li><img src=\"/notes/assets/images/2021-09-20-08-33-39.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"round-robin-rr\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#round-robin-rr\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Round Robin (RR)</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-12-18-13.png\"></li>\n<li>It is a type of <strong>preemptive</strong> FCFS.</li>\n<li>Simple explanation\n<ul>\n<li>There will be a queue.</li>\n<li>The process will run for some time.</li>\n<li>If the process is not completed, that process is blocked and put into ready queue.</li>\n<li>The next process runs.</li>\n</ul>\n</li>\n<li>Time given to each and every process is called time slice or <strong>time quantum.</strong>. It is represented by \"q\".</li>\n<li>Example\n<ul>\n<li>For the below example, the time quantum is 4. Thus, if a process is not finished after 4 units of time, it will be placed at last in the ready queue.</li>\n<li><img src=\"/notes/assets/images/2021-09-28-12-26-01.png\"></li>\n<li>Now we have the same example but with q = 1.</li>\n<li><img src=\"/notes/assets/images/2021-09-28-12-40-19.png\"></li>\n<li>Note here that the Mean NTAT for q = 4 is better than that when q = 1.</li>\n<li>Depending on the implementation of OS, these can be either pre defined or may be changed during the execution.</li>\n</ul>\n</li>\n<li>Issues\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-12-44-01.png\"></li>\n</ul>\n</li>\n<li>Thus, the ideal value of time quantum is slightly greater than the time required for a typical process interaction.</li>\n<li>Relative Treatment\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-13-24-26.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"virtual-round-robin\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#virtual-round-robin\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Virtual Round Robin</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-13-26-40.png\"></li>\n<li>In this strategy, we are assigning priority to I/O blocked processes by maintaining different queues.</li>\n</ul>\n<h2 id=\"shortest-process-next-spn\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#shortest-process-next-spn\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Shortest Process Next (SPN)</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-15-00-03.png\"></li>\n<li>Example\n<ul>\n<li>In the below example, the time shown is wrong and do your own calculation.</li>\n<li><img src=\"/notes/assets/images/2021-09-28-15-03-17.png\"></li>\n<li><img src=\"/notes/assets/images/2021-09-28-15-03-30.png\"></li>\n</ul>\n</li>\n<li>Issues\n<ul>\n<li><img src=\"/notes/assets/images/2021-09-28-15-03-48.png\"></li>\n<li>Having knowledge of service time is one of the biggest overhead in <strong>all the algorithms seen till now.</strong></li>\n<li>For interactive process, it is the most difficult job because the value can never be known.</li>\n<li>This is because, the process will have to wait for either I/O or for any user input.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"extra-points\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#extra-points\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Extra Points</h2>\n<ul>\n<li>DMA - Data memory access (DMA) is a hardware circuit through which all the data is transfered after an I/O is available.</li>\n</ul>","noteIndex":{"id":"PAQSbL1rYQAohZXoEr47M","title":"Curated Notes","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{},"fname":"root","updated":1630150480330,"created":1629975412335,"parent":null,"children":["Jq5ki9jf1QLTdc3DYLRW4","3ONxZ3Khb7nFPdLxlV1ib"],"data":{},"contentHash":"250e1442f895f06dba982d3a97cc447f","custom":{"nav_order":0,"permalink":"/"},"body":"\n\r\n\r\nYou have reached the home page of my curated notes. I am a third year student pursuing Computer Science and Engineering at Ahmedabad University.\r\n\r\nFeel free to use this resource to its best potential and reach out to me on [Linkedin](https://www.linkedin.com/in/sameep-vani/) and do checkout my [GitHub](https://github.com/Sameep1234)\r\n"},"collectionChildren":null,"customHeadContent":null,"config":{"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"siteUrl":"https://sameep1234.github.io","assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Sameep","description":"Personal knowledge space","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"author":"Sameep","logo":"vault/logo.gif","ga_tracking":"G-VZ67P3SVZE","siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"version":4,"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"dendronVersion":"0.70.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journalc","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"}},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}