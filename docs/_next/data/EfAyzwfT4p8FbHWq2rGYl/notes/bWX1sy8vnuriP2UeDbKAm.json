{"pageProps":{"note":{"id":"bWX1sy8vnuriP2UeDbKAm","title":"Lecture 8","desc":"","updated":1637847800570,"created":1634535324275,"custom":{},"fname":"courses.Semester 5.Embedded Systems.Lecture 8","type":"note","vault":{"fsPath":"vault"},"contentHash":"d48591e9b1f0422eed63251b5513a17c","links":[],"anchors":{"7-segment-led-lcd-and":{"type":"header","text":"7 Segment LED, LCD and","value":"7-segment-led-lcd-and","line":9,"column":0,"depth":2},"extra-points":{"type":"header","text":"Extra Points","value":"extra-points","line":11,"column":0,"depth":2},"lcds":{"type":"header","text":"LCD's","value":"lcds","line":54,"column":0,"depth":2},"4x4-key-board":{"type":"header","text":"4X4 Key Board","value":"4x4-key-board","line":94,"column":0,"depth":2}},"children":[],"parent":"a1PatlsCiz7PYsL111lFm","data":{}},"body":"<h1 id=\"lecture-8\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lecture-8\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lecture 8</h1>\n<h2 id=\"7-segment-led-lcd-and\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#7-segment-led-lcd-and\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>7 Segment LED, LCD and</h2>\n<h2 id=\"extra-points\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#extra-points\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Extra Points</h2>\n<ul>\n<li>In 7 segment LED, we can connect any port to any LED pin. All you need to take care is of the code that you are passing.</li>\n</ul>\n<blockquote>\n<p><img src=\"/notes/assets/images/2021-10-18-11-18-49.png\"></p>\n</blockquote>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;avr/io.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n    DDRA <span class=\"token operator\">=</span> DDRB <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Common Cathode PORTA output</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        PORTA <span class=\"token operator\">=</span> <span class=\"token number\">0x77</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Display A</span>\n        PORTB<span class=\"token punctuation\">.</span>b0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Enable pin</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<blockquote>\n<p><img src=\"/notes/assets/images/2021-10-18-11-28-58.png\"></p>\n</blockquote>\n<pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&#x3C;avr/io.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    DDRA <span class=\"token operator\">=</span> DDRB <span class=\"token operator\">=</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0x90</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x82</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x92</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xB0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xA4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xF9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        PORTB<span class=\"token punctuation\">.</span>b0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&#x3C;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            PORTA <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">delay_ms</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"lcds\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lcds\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>LCD's</h2>\n<ul>\n<li>Pin Position\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-46-36.png\"></li>\n</ul>\n</li>\n<li>Connections with AVR\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-47-39.png\"></li>\n</ul>\n</li>\n<li>Internal Components\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-49-03.png\"></li>\n</ul>\n</li>\n<li>Some important pins information\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-50-21.png\"></li>\n</ul>\n</li>\n<li>Pin5 - R/W (Read/Write)\n<ul>\n<li>0 means write and 1 means read</li>\n</ul>\n</li>\n<li>Pin6 - Enable\n<ul>\n<li>High to low means latch the data.</li>\n<li>Mimimum pulse width 450ns</li>\n</ul>\n</li>\n<li>Pin7 - OR DB7\n<ul>\n<li>1 means LCD not ready to accept new information and is performing some internal operation and 0 means LCD ready to receive new information.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>4 bit connections\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-16-55-42.png\"></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>C program declaration\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-54-05.png\"></li>\n</ul>\n<ul>\n<li>These include all the header files required.</li>\n<li>It also includes some standard defined PORTs which obviously can be modified but these are what is followed in textbook.</li>\n</ul>\n</li>\n<li>C program for LCD Commands\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-56-02.png\"></li>\n</ul>\n<ul>\n<li>This function will send the command to lcd.</li>\n<li>The list of commands can be obtained from below.</li>\n</ul>\n</li>\n<li>Table for lcd commands\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-18-11-57-33.png\"></li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>C program for LCD Data\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-25-19-10-07.png\"></li>\n</ul>\n</li>\n<li>C program for lcd initialization\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-01-18.png\"></li>\n</ul>\n</li>\n<li>C program lcd gotoxy function\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-03-01.png\"></li>\n</ul>\n</li>\n<li>C program lcd print\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-03-35.png\"></li>\n</ul>\n</li>\n<li>C program main function for lcd\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-02-23.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4x4-key-board\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#4x4-key-board\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>4X4 Key Board</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-04-40.png\"></li>\n<li>Identify which key is pressed\n<ul>\n<li><img src=\"/notes/assets/images/2021-11-03-17-05-47.png\"></li>\n<li>It is 2.</li>\n<li>We are putting logic 0 in row 0 and we are reading logic 0 in column 2. Thus, by intersection, we can say that key 2 was pressed.</li>\n<li>Note that here we are reading the column that is the input and rows are the output that we get.</li>\n</ul>\n</li>\n<li>Steps\n<ul>\n<li>Check to see preceding key is released of not.</li>\n<li>This means check whether all rows are 1.</li>\n<li>Next scan all columns in infinite loop.</li>\n<li>If any key press is detected, wait for 20 ms.</li>\n<li>This removes the spike/noise and avoids multiple key press interpretation for a key.</li>\n<li>To detect the pressed key, ground one row at a time and read the column.</li>\n<li>Lastly, upon finding the row, use look-up table to find its ASCII Code.</li>\n</ul>\n</li>\n</ul>","noteIndex":{"id":"GL4YoVrbDUHLnf946YtXV","title":"Curated Notes","desc":"","updated":1630150480330,"created":1629975412335,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"59326d3738fbbdf94df0792937dea389","links":[],"anchors":{},"children":["3ONxZ3Khb7nFPdLxlV1ib","Jq5ki9jf1QLTdc3DYLRW4","t5S98zYhQcXKMjbqBsVGg","Z2JlSyF7TPv3hFanVQhJd"],"parent":null,"data":{},"body":"\n\n\nYou have reached the home page of my curated notes. I am a third year student pursuing Computer Science and Engineering at Ahmedabad University.\n\nFeel free to use this resource to its best potential and reach out to me on [Linkedin](https://www.linkedin.com/in/sameep-vani/) and do checkout my [GitHub](https://github.com/Sameep1234)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"dev":{"enablePreviewV2":true},"version":5,"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{},"templateHierarchy":"template"},"workspace":{"dendronVersion":"0.100.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journalc","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableHandlebarTemplates":true,"enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/notes","copyAssets":true,"ga":{"tracking":"G-VZ67P3SVZE"},"logoPath":"vault/logo.gif","siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://sameep1234.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Sameep","description":"Personal knowledge space","author":"Sameep"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}