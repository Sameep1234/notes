{"pageProps":{"note":{"id":"oIZvJD5sS5bPfNsI1IACf","title":"Lecture 11","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{"threads":{"type":"header","text":"Threads","value":"threads","line":9,"column":0},"introduction":{"type":"header","text":"Introduction","value":"introduction","line":11,"column":0},"multithreading":{"type":"header","text":"Multithreading","value":"multithreading","line":18,"column":0},"single-thread-approach-and-multi-thread-approach":{"type":"header","text":"Single Thread approach and Multi thread approach","value":"single-thread-approach-and-multi-thread-approach","line":25,"column":0},"relationship-between-process-and-multithreading":{"type":"header","text":"Relationship between process and multithreading","value":"relationship-between-process-and-multithreading","line":30,"column":0},"multithreaded-environment":{"type":"header","text":"Multithreaded environment","value":"multithreaded-environment","line":34,"column":0},"thread-vs-process":{"type":"header","text":"Thread vs Process","value":"thread-vs-process","line":40,"column":0},"benefits-of-threads":{"type":"header","text":"Benefits of threads","value":"benefits-of-threads","line":46,"column":0},"case-study---file-server-application":{"type":"header","text":"Case study - File Server Application","value":"case-study---file-server-application","line":50,"column":0},"single-user-system":{"type":"header","text":"Single User System","value":"single-user-system","line":54,"column":0},"management-of-thread-at-process-level-and-similarities-with-processes":{"type":"header","text":"Management of thread at process level and similarities with processes","value":"management-of-thread-at-process-level-and-similarities-with-processes","line":62,"column":0},"thread-states-and-its-operations":{"type":"header","text":"Thread states and its operations","value":"thread-states-and-its-operations","line":67,"column":0},"remote-procedure-call":{"type":"header","text":"Remote Procedure Call","value":"remote-procedure-call","line":72,"column":0},"uniprocessor-multithreading":{"type":"header","text":"Uniprocessor Multithreading","value":"uniprocessor-multithreading","line":82,"column":0},"thread-synchronization":{"type":"header","text":"Thread Synchronization","value":"thread-synchronization","line":86,"column":0},"categories-of-thread-implementation":{"type":"header","text":"Categories of Thread Implementation","value":"categories-of-thread-implementation","line":91,"column":0},"combined-approach":{"type":"header","text":"Combined Approach","value":"combined-approach","line":115,"column":0},"thread-and-process":{"type":"header","text":"Thread and Process","value":"thread-and-process","line":120,"column":0}},"fname":"courses.Semester 5.Operating System.Lecture 11","updated":1634062754283,"created":1634037178840,"parent":"OGq6U8MXIG3wwETNLR4b6","children":[],"data":{},"contentHash":"bd839cac138fe3d5ff9000c80302abcc","custom":{}},"body":"<h1 id=\"lecture-11\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#lecture-11\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Lecture 11</h1>\n<h2 id=\"threads\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#threads\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Threads</h2>\n<h2 id=\"introduction\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#introduction\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Introduction</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-16-45-08.png\"></li>\n<li>The unit of dispatching is referred to as a thread or lightweight process.</li>\n<li>Thus, to define thread, we can say that it is an independent path of execution of instruction.</li>\n<li>The unit of resource ownership is referred to as a process or task.</li>\n</ul>\n<h2 id=\"multithreading\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#multithreading\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Multithreading</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-16-47-59.png\"></li>\n<li>Threads, in  greneral, run the same set of instructions. </li>\n<li>However, it might be the case where the interaction with client make some more instructions to execute or some instructions to get skipped.</li>\n<li>Eg. Server pool of threads for each client, Word program checking spelling and displaying output at the same time.</li>\n</ul>\n<h2 id=\"single-thread-approach-and-multi-thread-approach\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#single-thread-approach-and-multi-thread-approach\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Single Thread approach and Multi thread approach</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-16-52-16.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-16-53-25.png\"></li>\n</ul>\n<h2 id=\"relationship-between-process-and-multithreading\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#relationship-between-process-and-multithreading\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Relationship between process and multithreading</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-16-55-14.png\"></li>\n</ul>\n<h2 id=\"multithreaded-environment\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#multithreaded-environment\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Multithreaded environment</h2>\n<ul>\n<li>When we have one or more threads in process, each thread has the following\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-16-57-25.png\"></li>\n</ul>\n</li>\n<li>Theoritical Definition: Thread is an <strong>independent</strong> program counter operating <strong>within</strong> a process.</li>\n</ul>\n<h2 id=\"thread-vs-process\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#thread-vs-process\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Thread vs Process</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-00-26.png\"></li>\n<li>Recap: User address space contains the program and the data.</li>\n<li>Thus, we can see that the user address space is shared with multiple threads within the same process.</li>\n</ul>\n<h2 id=\"benefits-of-threads\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#benefits-of-threads\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Benefits of threads</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-04-46.png\"></li>\n</ul>\n<h2 id=\"case-study---file-server-application\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#case-study---file-server-application\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Case study - File Server Application</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-06-59.png\"></li>\n</ul>\n<h2 id=\"single-user-system\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#single-user-system\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Single User System</h2>\n<ul>\n<li>In file server, we can have multiple client requests and multiple threads, but in single user system, it is not the case.</li>\n<li>Foreground/Background processes can be handled using threads individually.</li>\n<li>Asynchronous Processing - Eg. Backing up in background.</li>\n<li>Faster Execution - Read one set of data while processing another set.</li>\n<li>Organization - Eg. For a word processing program, may allow one thread for each file being edited.</li>\n</ul>\n<h2 id=\"management-of-thread-at-process-level-and-similarities-with-processes\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#management-of-thread-at-process-level-and-similarities-with-processes\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Management of thread at process level and similarities with processes</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-11-53.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-17-12-55.png\"></li>\n</ul>\n<h2 id=\"thread-states-and-its-operations\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#thread-states-and-its-operations\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Thread states and its operations</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-13-25.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-17-14-36.png\"></li>\n</ul>\n<h2 id=\"remote-procedure-call\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#remote-procedure-call\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Remote Procedure Call</h2>\n<ul>\n<li>It means that from one program, we are calling a procedure of another program in the remote machine.</li>\n<li>Distributed computing concept starts with RPCs.</li>\n<li><img src=\"/notes/assets/images/2021-10-12-17-16-34.png\"></li>\n<li>Single Thread Model\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-16-55.png\"></li>\n</ul>\n</li>\n<li>Multi Thread Model\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-17-52.png\"></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"uniprocessor-multithreading\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#uniprocessor-multithreading\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Uniprocessor Multithreading</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-19-06.png\"></li>\n</ul>\n<h2 id=\"thread-synchronization\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#thread-synchronization\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Thread Synchronization</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-17-20-26.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-17-23-12.png\"></li>\n</ul>\n<h2 id=\"categories-of-thread-implementation\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#categories-of-thread-implementation\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Categories of Thread Implementation</h2>\n<ul>\n<li>User Level Threads (ULT)\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-19-32-18.png\"></li>\n<li>Java supports ULT.</li>\n<li>Suppose that a thread is running and makes a system call.</li>\n<li>Since, it made a system call, it must go through the kernel.</li>\n<li>The kernel is not aware about the thread, it is only aware about the process and thus, the whole process gets blocked.</li>\n<li>Overall, the process state and thread state may not change simultaneously or concurrently.</li>\n<li>Advantage\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-19-41-26.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-19-41-38.png\"></li>\n<li>The different scheduling is done only for application and not done by the kernel as kernel is not aware about the threads.</li>\n<li><img src=\"/notes/assets/images/2021-10-12-19-43-51.png\"></li>\n</ul>\n</li>\n<li>Disadvantage\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-19-44-22.png\"></li>\n<li><img src=\"/notes/assets/images/2021-10-12-19-44-39.png\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Kernel Level Threads (KLT)\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-22-45-15.png\"></li>\n<li>Advantages\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-23-45-11.png\"></li>\n</ul>\n</li>\n<li>Disadvantages\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-23-45-33.png\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"combined-approach\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#combined-approach\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Combined Approach</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-23-49-04.png\"></li>\n<li>Eg. Solaris uses this approach.</li>\n</ul>\n<h2 id=\"thread-and-process\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#thread-and-process\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Thread and Process</h2>\n<ul>\n<li><img src=\"/notes/assets/images/2021-10-12-23-49-57.png\"></li>\n<li>For 1:M, at a time, a thread belongs to one process.</li>\n</ul>","noteIndex":{"id":"GL4YoVrbDUHLnf946YtXV","title":"Curated Notes","vault":{"fsPath":"vault"},"type":"note","desc":"","links":[],"anchors":{},"fname":"root","updated":1630150480330,"created":1629975412335,"parent":null,"children":["Jq5ki9jf1QLTdc3DYLRW4","t5S98zYhQcXKMjbqBsVGg","3ONxZ3Khb7nFPdLxlV1ib","Z2JlSyF7TPv3hFanVQhJd"],"data":{},"contentHash":"e9b530a3175371dde392f83db6e59628","custom":{"nav_order":0,"permalink":"/"},"body":"\n\r\n\r\nYou have reached the home page of my curated notes. I am a third year student pursuing Computer Science and Engineering at Ahmedabad University.\r\n\r\nFeel free to use this resource to its best potential and reach out to me on [Linkedin](https://www.linkedin.com/in/sameep-vani/) and do checkout my [GitHub](https://github.com/Sameep1234)\r\n"},"collectionChildren":null,"customHeadContent":null,"config":{"useFMTitle":true,"useNoteTitleForLink":true,"mermaid":true,"useKatex":true,"dev":{"enablePreviewV2":true},"site":{"siteUrl":"https://sameep1234.github.io","assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"siteRootDir":"docs","usePrettyRefs":true,"title":"Sameep","description":"Personal knowledge space","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"author":"Sameep","logo":"vault/logo.gif","ga_tracking":"G-VZ67P3SVZE","siteLastModified":true,"gh_edit_branch":"main","usePrettyLinks":true,"siteNotesDir":"notes","siteFaviconPath":"favicon.ico","gh_edit_link":true,"gh_edit_link_text":"Edit this page on GitHub","gh_root":"docs/","gh_edit_view_mode":"edit","writeStubs":true,"siteIndex":"root"},"version":4,"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true}},"randomNote":{},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false}},"workspace":{"dendronVersion":"0.70.0","vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journalc","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableUserTags":true,"enableHashTags":true,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"}},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true}}},"__N_SSG":true}